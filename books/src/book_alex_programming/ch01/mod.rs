// 学习方法: 刷墙式学习法
// 组织阶段, 梳理层次,
// 查漏补缺 -> 夯实基础

// Rust语言学习观: 十条最佳建议
// 整体出发, 掌控感, 高屋建瓴, 知识金字塔 --> 一致性规则, 底层原理,
// 抛弃一次性学会的念头, 渐进式学习
// 四个层次: 所有权系统, 编程范式, 类型系统, 内存管理
// 和已知的知识建立联系, 关联, 异同,
// 为什么没有继承 -> 组合
// 没有三元操作符 -> 表达式而非语句
// 一上来就批判
// 学会阅读源码, 从源码中学习 --> 实践活动
// 通过主题式阅读弥补空白(异步, 好事多磨)
// 时刻把握Rust设计哲学, 和而不同
// 构建自己的心智模型, 动态学习调整策略, 判断/边界/层次/理解
// 多分享多提问多交流, 说出来 / 开源项目锻炼自己
// 阅读Rust编程之道

// Rust语言概览: /为什么/从何而来/到哪里去/
// 内存安全方案 / C-ABI / SafeRust + UnsafeRust, 并不孤立, 与底层打交道
// 5种例外情况
// "混合范式" -> OOP / FP / 泛型 / "面向过程" / 面向编译器
// 向前 / 向后 :

// 词法结构:
// 语义化版本 / 发行版本(Nightly/Beta/Stable) 自举 / 每六周
// Edition版次: 2015/2018/2021 Edition 方便自身的进化 / 破坏性变化
// 六大词法结构, 词法与语法, rusct, 多道工序
// Tokens AST HIR MIR LLVM bits
// 关键字, 标志符, 注释, 

mod ctfe;